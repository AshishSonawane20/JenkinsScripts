import java.text.SimpleDateFormat
import groovy.transform.Field
import java.util.regex.Matcher
import java.util.regex.Pattern

@Field
String workspace = "/opt/jenkins/workspace/GCL-Pipeline"

@Field List projectsToScan = []

@Field
String[] projects = [ 
		"dataSecurity",
		"groupInsurance-exceptions", 
		"groupInsurance-common-utils", 
		"groupInsurance-interfaces", 
		"groupInsurance-persistance",
		"groupInsurance-business",
		"groupInsurance-ws-client",
		"groupInsurance-rest",
		"groupInsurance-web"
	]

@Field
String developmentNodeLabel = "gcl_label"
@Field
String uatNodeLabel = "gcl_label"

node{
	sh "env"
	if(env.gitlabActionType){
		switch(gitlabActionType) {
			case 'PUSH':
					switch(gitlabTargetBranch) {
						case 'development':
							timestampedNode(developmentNodeLabel){
								checkoutGitlab('development')
								getGitChangeSet()
								//sonarScan()
								//qualityGate()
								executeBuildCommands()
								sshTransfer()
								deployWarFiles()
							}
							break
						case 'uat':
							timestampedNode(uatNodeLabel){
								checkoutGitlab('uat')
								getGitChangeSet()
								//sonarScan()
								//qualityGate()
								executeBuildCommands()
								sshTransfer()
								deployWarFiles()
							}
							break
						default:
							echo "any other branch"
							break
					}
				break
			default:
				echo "Default Value Event"
				break
		}
	}else{
		def defaultEnvironment = "Development"
		def selectedEnvironment
		try {
			timeout(time: 10, unit: 'MINUTES') {
				def INPUT_PARAMS = input message: 'Please Provide Parameters', ok: 'Next',
								parameters: [
									choice(name: 'ENVIRONMENT', choices: ['Development','UAT'].join('\n'), description: 'Please select the Environment')
								]
				selectedEnvironment = INPUT_PARAMS.toString()
			}
		}catch (Exception e) {
			selectedEnvironment = defaultEnvironment
			echo "User input timed out or cancelled, continue with default values"
		}
		
		if(selectedEnvironment == "Development"){
			timestampedNode(developmentNodeLabel){
				echo "Deploying from development branch on Development environment"
				checkoutGitlab('development')
				executeBuildCommands()
				sshTransfer()
				deployWarFiles()
				
			}
		}else if(selectedEnvironment == "UAT"){
			timestampedNode(uatNodeLabel){
				echo "Deploying from uat branch on UAT environment"
				checkoutGitlab('uat')
				executeBuildCommands()
				sshTransfer()
				deployWarFiles()
			}
		}
	}
}
def timestampedNode(String label = "master", Closure body) {
  node(label) {
    wrap([$class: 'TimestamperBuildWrapper']) {
      body.call();
    }
  }
}
def checkoutGitlab(branch){
	stage('Checkout'){
		checkout(
				[
					$class: 'GitSCM',
					branches: [[name: "*/${branch}"]],
					doGenerateSubmoduleConfigurations: false,
					extensions: [],
					submoduleCfg: [],
					userRemoteConfigs: [[
						credentialsId: '6521d470-22e4-4afe-b3fc-a2dff9b8c7ba',
						url: 'https://git.fulcrumww.com/IFL_Grp/IFL_GCL_WEB.git'
					]]
				]
			)
	}
}
def getGitChangeSet(){
	stage('Changeset detection'){
		def gitChangeList = sh (script: "(cd ${workspace} ; git diff-tree --no-commit-id --name-only -r ${env.gitlabAfter})", returnStdout: true)
		println (gitChangeList)
		println ("Scanning following projects:")
		for (int j = 0; j < projects.size(); j++) {
			def m = gitChangeList =~ /${projects[j]}/                                           
			assert m instanceof Matcher                                       
			if(m){  
				projectsToScan.add(projects[j])
				echo "${projects[j]}"
			}
		}
	}
}
def sonarScan(){
	stage('Sonar scanning'){
		for (int k = 0; k < projectsToScan.size(); k++) {
			withSonarQubeEnv('Sonarqube Server') {
				sh "(cd ${workspace}/${projectsToScan[k]} ; /opt/sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner)"
			}
		}
	}
}
def qualityGate(){
	stage("Quality Gate"){
	for (int s = 0; s < projectsToScan.size(); s++) {
		def props = readProperties  file: "${projectsToScan[s]}/.scannerwork/report-task.txt"
		echo "properties=${props}"
		def sonarServerUrl=props['serverUrl']
		def ceTaskUrl= props['ceTaskUrl']
		def ceTask
		timeout(time: 25, unit: 'MINUTES') {
			waitUntil {
				def response = httpRequest url : ceTaskUrl, authentication: 'sonar_quality_gate'
				ceTask = readJSON text: response.content
				echo ceTask.toString()
				echo ceTask["task"]["status"]
				return "SUCCESS".equals(ceTask["task"]["status"])
			}
		}
	}
	}
}
def executeBuildCommands(){
	stage("Buid process"){
		sh "sudo chmod -R 777 /opt/jenkins/workspace"
		for (int i = 0; i < projects.size(); i++) {
			sh "( cd ${workspace}/${projects[i]} ; mvn clean install -U )"
		}
	}
}
def sshTransfer(){
	stage('SSH transfer') {
		sh "sudo cp ${workspace}/groupInsurance-web/target/groupInsurance-web.war /opt/GCL_Build/"
		sh "sudo cp ${workspace}/groupInsurance-rest/target/groupInsurance-rest.war /opt/GCL_Build/"
	}
}
def deployWarFiles(){
	stage('Deployment') {
		def date = new Date()
		sdf = new SimpleDateFormat("dd-mm-yyyy-HH-mm")
		println sdf.format(date)
		def currentDate = sdf.format(date)

		def commandScript = """
		sudo killall -9 java
		sudo mkdir /opt/GCL_Build/BackUp/Back_${currentDate}
		sudo mv /opt/jboss-eap-6.1/standalone/deployments/*.war /opt/GCL_Build/BackUp/Back_${currentDate}
		cd /opt/jboss-eap-6.1/standalone/deployments
		sudo rm -rf *
		cd /tmp/
		sudo rm -rf *
		cd /opt/jboss-eap-6.1/standalone/tmp/
		sudo rm -rf *
		cd /opt/jboss-eap-6.1/bin/
		sudo chmod 777 *
		cd /opt/jboss-eap-6.1/bin/
		sudo rm -rf  console-*.out
		sudo cp /opt/GCL_Build/*.war /opt/jboss-eap-6.1/standalone/deployments/
		cd /opt/jboss-eap-6.1/bin/
		sudo ./ifli_startup.sh
		"""
		
		sh""" 
			echo "${commandScript}" > /opt/jenkins/deployment.sh
		"""
		echo "Waiting for node to deploy"
		sh "sh /opt/jenkins/deployment.sh"
	}
}

def sendMail(){
	stage('Send Email') {
		echo 'Send Email'
		mail bcc: '', 
		body: 'Failed Pipeline', 
		cc: '', 
		from: 'FWIN02099@fulcrumdigital.com', 
		replyTo: '', 
		subject: 'Failed Pipeline', 
		to: 'FWIN02099@fulcrumdigital.com'
	}
}