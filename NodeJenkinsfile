node('contractor_app_web_label') {
	echo "===================================Environment variables starts==================================="
		sh "env"
	echo "===================================Environment variables ends==================================="
	switch(env.gitlabActionType) {
		case 'PUSH':
			echo "===================================PUSH event starts==================================="
				switch(env.gitlabTargetBranch) {
					case 'development':
						echo "development branch"
						checkoutGitlab('development')
						//sonarScan()
						//qualityGate()
						//executeBeforeBuildCommands()
						//sendMail()
						//sshTransfer()
						break
					case 'master':
						echo "master"
						break
					default:
						echo "any other branch"
						break
				}
			echo "===================================PUSH event ends==================================="
			break
		case 'MERGE':
			echo "===================================MERGE event starts==================================="
				sh "env"
			echo "===================================MERGE event ends====================================="
			break
		default:
			echo "Default Value Event"
			break
	}
}
def sonarScan(){
	stage('Sonar'){
		echo "===================================Sonar scanner starts================================="
		withSonarQubeEnv('Sonarqube Server') {
			sh "cd /var/www/pcc/workspace/pcc_angular_pipeline"
			sh "/var/www/sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner"
		}
		echo "===================================Sonar scanner ends==================================="
	}
}
def qualityGate(){
	stage("Quality Gate"){
		echo "===================================Quality Gate starts================================="
		def props = readProperties  file: '.scannerwork/report-task.txt'
		echo "properties=${props}"
		def sonarServerUrl=props['serverUrl']
		def ceTaskUrl= props['ceTaskUrl']
		def ceTask
		timeout(time: 1, unit: 'HOURS') {
			waitUntil {
				def response = httpRequest url : ceTaskUrl, authentication: 'sonar_quality_gate'
				ceTask = readJSON text: response.content
				echo ceTask.toString()
				echo ceTask["task"]["status"]
				return "SUCCESS".equals(ceTask["task"]["status"])
			}
		}
		echo "===================================Quality Gate ends==================================="
	}
}
def sshTransfer(){
	stage('SSH transfer') {
		echo "===================================SSH transfer starts==================================="
		sh "rsync -auv /var/www/pcc/workspace/pcc_angular_pipeline/dist/NewApp10/ /var/www/dev/"
		echo "===================================SSH transfer ends==================================="
	}
}
def checkoutGitlab(branch){
	stage('Checkout'){
		echo "===================================Checkout stage for ${branch} starts==================================="
		checkout(
				[
					$class: 'GitSCM',
					branches: [[name: "*/${branch}"]],
					doGenerateSubmoduleConfigurations: false,
					extensions: [],
					submoduleCfg: [],
					userRemoteConfigs: [[
						credentialsId: '6521d470-22e4-4afe-b3fc-a2dff9b8c7ba',
						url: '<git_url>'
					]]
				]
			)
		echo "===================================Checkout stage for ${branch} ends==================================="
	}
}

def executeBeforeBuildCommands(){
	echo "===================================Executing commands starts==================================="
	sh "( cd /var/www/pcc/workspace/pcc_angular_pipeline/ ; npm install )"
	sh "( cd /var/www/pcc/workspace/pcc_angular_pipeline/ ; ng build --baseHref= )"
	echo "===================================Executing commands ends==================================="
}